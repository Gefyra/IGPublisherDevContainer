name: Build Devcontainer Image

on:
  push:
    branches:
      - main
    paths:
      - .devcontainer/**
      - .github/workflows/devcontainer-image.yml
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/igpublisher-devcontainer

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Compute image name
        id: image
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "registry=ghcr.io/$owner/igpublisher-devcontainer" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.image.outputs.registry }}:latest
          cache-from: type=registry,ref=${{ steps.image.outputs.registry }}:buildcache
          cache-to: type=registry,ref=${{ steps.image.outputs.registry }}:buildcache,mode=max

      - name: Determine SUSHI version
        id: sushi
        run: |
          version=$(docker run --rm --platform linux/amd64 --entrypoint sushi ${{ steps.image.outputs.registry }}:latest --version | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          if [ -z "$version" ]; then
            echo "Unable to detect SUSHI version" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Tag and push version-specific image
        env:
          VERSION: ${{ steps.sushi.outputs.version }}
        run: |
          IMAGE=${{ steps.image.outputs.registry }}
          docker buildx imagetools create \
            --tag $IMAGE:sushi-$VERSION \
            $IMAGE:latest
