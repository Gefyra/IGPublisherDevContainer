name: Check SUSHI Release

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      needs-build: ${{ steps.decision.outputs.needs-build }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Resolve latest SUSHI release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -fsSL \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/FHIR/sushi/releases/latest)
          tag=$(echo "$response" | jq -r '.tag_name')
          if [ -z "$tag" ] || [ "$tag" = "null" ]; then
            echo "Failed to fetch latest SUSHI release tag" >&2
            exit 1
          fi
          version=${tag#v}
          echo "Latest SUSHI release: $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Check published image tags
        id: decision
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}   # z.B. Gefyra
          VERSION: ${{ steps.release.outputs.version }}
          PACKAGE: igpublisher-devcontainer
        run: |
          set -euo pipefail

          # 1) Zuerst in der Org-Namespace schauen
          org_url="https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE/versions?per_page=100"
          # 2) Fallback: User-Namespace (falls das Package dem Benutzer gehört)
          user_url="https://api.github.com/users/$OWNER/packages/container/$PACKAGE/versions?per_page=100"

          fetch_versions() {
            local url="$1"
            curl -fsSL \
              -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "$url" \
            | jq -r '.[].metadata.container.tags[]?' || true
          }

          # Versuche Org zuerst
          tags="$(fetch_versions "$org_url")" || tags=""
          if [ -z "$tags" ]; then
            # Fallback: User-Namespace
            tags="$(fetch_versions "$user_url")" || tags=""
          fi

          if echo "$tags" | grep -Fxq "sushi-$VERSION"; then
            echo "needs-build=false" >> "$GITHUB_OUTPUT"
            echo "Tag sushi-$VERSION existiert bereits."
          else
            echo "needs-build=true" >> "$GITHUB_OUTPUT"
            echo "Tag sushi-$VERSION fehlt → build nötig."
          fi

  build:
    needs: check
    if: needs.check.outputs.needs-build == 'true'
    uses: ./.github/workflows/devcontainer-image.yml
    secrets: inherit
